import fs from 'fs';
import path from 'path';

const THEME_FILES_TO_READ = {
  // –§–∞–π–ª—ã –¥–ª—è —á—Ç–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
  'light': 'tokens/build/light-tokens.css',
  'dark': 'tokens/build/dark-tokens.css',
};
const OUTPUT_FILE = 'tokens/build/variables.css'; // –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π @theme

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç CamelCase (Primary) –≤ Kebab-Case (primary).
 */
function toKebabCase(str) {
  // –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π) –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ –¥–µ—Ñ–∏—Å.
  return str.charAt(0).toLowerCase() + str.slice(1).replace(/([A-Z])/g, (g) => `-${g.toLowerCase()}`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫ @theme.
 */
function fixCssVariables() {
    const allAliases = []; // –ï–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
    let success = true;

    for (const [theme, filePath] of Object.entries(THEME_FILES_TO_READ)) {
        try {
            const fullPath = path.resolve(filePath);
            const cssContent = fs.readFileSync(fullPath, 'utf8');
            const lines = cssContent.split('\n');

            for (const line of lines) {
                // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: --lightPrimary: #color;
                const match = line.match(/^(\s*)(--[^:]+):\s*([^;]+);/);

                if (match) {
                    const oldVarName = match[2]; // --lightPrimary

                    // 1. –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–µ–º—ã (lightPrimary -> Primary)
                    const baseName = oldVarName.substring(2).replace(new RegExp(`^${theme}`, 'i'), ''); 
                    
                    // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ç–æ–∫–µ–Ω–∞: Primary -> primary
                    const kebabName = toKebabCase(baseName);
                    
                    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º **–∂–µ–ª–∞–µ–º–æ–µ** –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: --color-primary-light 
                    // –ú–´ –£–ë–†–ê–õ–ò "tw-"
                    const newAliasName = `--color-${kebabName}-${theme}`; 
                    
                    // 4. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
                    const aliasLine = `  ${newAliasName}: var(${oldVarName});`;
                    
                    allAliases.push(aliasLine);
                }
            }
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ç–µ–º—ã: ${theme}`);

        } catch (error) {
            if (error.code === 'ENOENT') {
                 console.warn(`‚ö†Ô∏è –§–∞–π–ª —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫: ${filePath}`);
            } else {
                 console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
                 success = false;
            }
        }
    }

    if (!success) return;

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ CSS —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π @theme
    let outputContent = "/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ fix-variables.js –¥–ª—è Tailwind v4 @theme */\n\n";
    
    outputContent += `@theme {\n`;
    outputContent += allAliases.join('\n');
    outputContent += `\n}\n`;

    // 3. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    try {
        const outputFullPath = path.resolve(OUTPUT_FILE);
        fs.mkdirSync(path.dirname(outputFullPath), { recursive: true });
        
        fs.writeFileSync(outputFullPath, outputContent, 'utf8');
        console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏ (@theme): ${OUTPUT_FILE}`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${OUTPUT_FILE}:`, error.message);
    }
}

fixCssVariables();