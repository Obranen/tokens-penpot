import fs from 'fs'
import path from 'path'

// –£–î–ê–õ–ï–ù–û: –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ VARIANT_PREFIXES_TO_MOVE.
// –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å.

const THEME_FILES_TO_READ = {
  // –§–∞–π–ª—ã –¥–ª—è —á—Ç–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
  semantic: 'tokens/build/semantic-variables.css',
}
const OUTPUT_FILE = 'tokens/build/tailwind-variables.css' // –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º–∏ @theme –∏ @utility

/**
 * –ö–∞—Ä—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'deg' –¥–ª—è 'rotate').
 * –ö–ª—é—á: —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π; –ó–Ω–∞—á–µ–Ω–∏–µ: –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è.
 * –ï–¥–∏–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å—Ç—ã–º —á–∏—Å–ª–æ–º.
 */
const UNIT_MAP = {
  'rotate': 'deg',
  'translate': 'rem', // –î–æ–±–∞–≤–ª–µ–Ω–æ
  'gap': 'rem', // –î–æ–±–∞–≤–ª–µ–Ω–æ
  'spacing': 'rem',
  'size': 'rem',
  'width': 'rem',
  'height': 'rem',
}

/**
 * –ù–û–í–ê–Ø –ö–ê–†–¢–ê: –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤ @utility.
 * –ö–ª—é—á: finalName (—á–∞—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞);
 * –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ CSS-—Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã.
 */
const UTILITY_MAP = {
  // text-transform: –¥–ª—è 'light-case: lowercase;' -> @utility case-light { text-transform: var(--case-light); }
  'case': 'text-transform', 
  // text-decoration-line: –¥–ª—è 'light-decoration: underline;' -> @utility decoration-light { text-decoration-line: var(--decoration-light); }
  'decoration': 'text-decoration-line', 
  // -webkit-line-clamp: –¥–ª—è 'light-line-clamp-3: 3;' -> @utility line-clamp-3-light { -webkit-line-clamp: var(--line-clamp-3-light); }
  'line-clamp': '-webkit-line-clamp', 
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö CSS, –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π @theme.
 */
function fixCssVariables() {
  const allAliases = [] // –ï–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ (@theme { --alias: value; })
  const allUtilities = [] // –ï–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ @utility
  let success = true

  for (const [, filePath] of Object.entries(THEME_FILES_TO_READ)) {
    try {
      const fullPath = path.resolve(filePath)
      const cssContent = fs.readFileSync(fullPath, 'utf8')
      const lines = cssContent.split('\n')

      for (const line of lines) {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: --var-name: value; /* optional comment */
        const match = line.match(
          /^(\s*)(--[^:]+):\s*([^;]+);(\s*(\/\*.*\*\/))?/
        )

        if (match) {
          const oldVarName = match[2] // –ù–∞–ø—Ä–∏–º–µ—Ä, --light-gap-4 –∏–ª–∏ --light-rotate-90
          
          let value = match[3].trim() 

          // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ `--`
          const fullVarName = oldVarName.substring(2) // 'light-rotate-90'
          const parts = fullVarName.split('-')
          
          let finalName = fullVarName
          let variantSuffix = '' // –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ç–µ–º–∞, –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç)

          // 2. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –≤ —Å—É—Ñ—Ñ–∏–∫—Å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ñ–∏—Å.
          if (parts.length > 1) {
            variantSuffix = parts[0].toLowerCase() 
            finalName = parts.slice(1).join('-') // 'rotate-90' –∏–ª–∏ 'case' –∏–ª–∏ 'decoration'
          } else {
            finalName = fullVarName
          }

          // 3. –õ–û–ì–ò–ö–ê –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å—Ç—ã–º —á–∏—Å–ª–æ–º.
          const isNumeric = /^-?\d+(\.\d+)?$/.test(value);

          if (isNumeric) {
            for (const [prefix, unit] of Object.entries(UNIT_MAP)) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–∞–µ—Ç –ª–∏ finalName –ø—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'rotate-90' –≤–∫–ª—é—á–∞–µ—Ç 'rotate')
              if (finalName.includes(prefix)) {
                value += unit
                break
              }
            }
          }
          // ------------------------------------------

          // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞: --[finalName]-[variantSuffix]
          const newAliasName = variantSuffix
            ? `--${finalName}-${variantSuffix}`
            : `--${finalName}`

          // 5. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º (–¥–ª—è @theme)
          const aliasLine = `  ${newAliasName}: ${value};`
          allAliases.push(aliasLine)

          // 6. –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–¢–ò–õ–ò–¢–´
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ finalName —Å –∫–ª—é—á–∞ –∏–∑ UTILITY_MAP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'decoration' –∏–ª–∏ 'line-clamp')
          let utilityKey = Object.keys(UTILITY_MAP).find(key => finalName.startsWith(key));
          
          if (utilityKey && variantSuffix) {
            const utilityProperty = UTILITY_MAP[utilityKey];

            // –ò–º—è —É—Ç–∏–ª–∏—Ç—ã: decoration-light –∏–ª–∏ line-clamp-3-light
            const utilityName = `${finalName}-${variantSuffix}` 
            
            const utilityBlock = 
`@utility ${utilityName} {
  ${utilityProperty}: var(${newAliasName});
}`
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
            if (!allUtilities.includes(utilityBlock)) {
              allUtilities.push(utilityBlock)
            }
          }
          // ------------------------------------------
        }
      }
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ñ–∞–π–ª–∞: ${filePath}`)
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫: ${filePath}`)
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message)
        success = false
      }
    }
  }

  if (!success) return

  // 7. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –≤–∫–ª—é—á–∞–µ—Ç @theme –∏ @utility)
  let outputContent =
    '/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ fix-variables.js –¥–ª—è Tailwind v4 @theme –∏ @utility */\n\n'

  // –ë–ª–æ–∫ @theme —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏-–ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏
  outputContent += `@theme {\n`
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
  const uniqueAndSortedAliases = [...new Set(allAliases)].sort()
  outputContent += uniqueAndSortedAliases.join('\n')
  outputContent += `\n}\n\n` // –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

  // –ë–ª–æ–∫–∏ @utility
  outputContent += allUtilities.join('\n\n')

  try {
    const outputFullPath = path.resolve(OUTPUT_FILE)
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    fs.mkdirSync(path.dirname(outputFullPath), { recursive: true })

    fs.writeFileSync(outputFullPath, outputContent, 'utf8')
    console.log(
      `\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (@theme –∏ @utility): ${OUTPUT_FILE}`
    )
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${OUTPUT_FILE}:`, error.message)
  }
}

fixCssVariables()
