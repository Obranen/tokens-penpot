import fs from 'fs'
import path from 'path'

const THEME_FILES_TO_READ = {
  // –§–∞–π–ª—ã –¥–ª—è —á—Ç–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
  variables: 'tokens/build/style-dictionary-variables.css',
}
const OUTPUT_FILE = 'tokens/build/tailwind-variables.css' // –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π @theme

function extractCategory(line) {
  // –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–∏–¥–∞ /** category*/ –∏–ª–∏ /* category */
  const match = line.match(
    /\/\*\*\s*([^ *\/]+)\s*\*\/|\/\*\s*([^ *\/]+)\s*\*\//
  )
  if (match) {
    // match[1] –¥–ª—è /** category*/, match[2] –¥–ª—è /* category */. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π.
    const category = match[1] || match[2]
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    return category.trim().toLowerCase()
  }
  return null // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
}

function fixCssVariables() {
  const allAliases = [] // –ï–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
  let success = true

  for (const [theme, filePath] of Object.entries(THEME_FILES_TO_READ)) {
    try {
      const fullPath = path.resolve(filePath)
      const cssContent = fs.readFileSync(fullPath, 'utf8')
      const lines = cssContent.split('\n')

      for (const line of lines) {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: --lightPrimary: #color; /** comment */
        const match = line.match(
          /^(\s*)(--[^:]+):\s*([^;]+);(\s*(\/\*.*\*\/))?/
        )

        if (match) {
          const oldVarName = match[2] // --lightPrimary
          const value = match[3].trim() // #b70000 (Value)
          const comment = match[4] || '' // /** color*/ –∏–ª–∏ ''

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
          const category = extractCategory(comment)

          // 1. –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -- –∏ –ø—Ä–µ—Ñ–∏–∫—Å —Ç–µ–º—ã (e.g. --variables-3xl-3xl -> 3xl-3xl)
          let baseName = oldVarName
            .substring(2)
            .replace(new RegExp(`^${theme}`, 'i'), '')

          const prefix = category ? `${category}-` : 'none-' // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'none-' –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞

          // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è: --[category]-[fixedName]
          const newAliasName = `--${prefix}${baseName}`

          // 5. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
          const aliasLine = `  ${newAliasName}: ${value};`

          allAliases.push(aliasLine)
        }
      }
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ç–µ–º—ã: ${theme}`)
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫: ${filePath}`)
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message)
        success = false
      }
    }
  }

  if (!success) return

  // 6. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  let outputContent =
    '/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ fix-variables.js –¥–ª—è Tailwind v4 @theme */\n\n'

  outputContent += `@theme {\n`
  outputContent += allAliases.join('\n')
  outputContent += `\n}\n`

  try {
    const outputFullPath = path.resolve(OUTPUT_FILE)
    fs.mkdirSync(path.dirname(outputFullPath), { recursive: true })

    fs.writeFileSync(outputFullPath, outputContent, 'utf8')
    console.log(
      `\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏ (@theme): ${OUTPUT_FILE}`
    )
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${OUTPUT_FILE}:`, error.message)
  }
}

fixCssVariables()
