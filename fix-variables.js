import fs from 'fs'
import path from 'path'

// –£–î–ê–õ–ï–ù–û: –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ VARIANT_PREFIXES_TO_MOVE.
// –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å.

const THEME_FILES_TO_READ = {
  // –§–∞–π–ª—ã –¥–ª—è —á—Ç–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
  semantic: 'tokens/build/semantic-variables.css',
}
const OUTPUT_FILE = 'tokens/build/tailwind-variables.css' // –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π @theme

/**
 * –ö–∞—Ä—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'deg' –¥–ª—è 'rotate').
 * –ö–ª—é—á: —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π; –ó–Ω–∞—á–µ–Ω–∏–µ: –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è.
 * –ï–¥–∏–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å—Ç—ã–º —á–∏—Å–ª–æ–º.
 */
const UNIT_MAP = {
  'rotate': 'deg',
  // TODO: –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –µ–¥–∏–Ω–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'translate': 'rem'
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö CSS, –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π @theme.
 */
function fixCssVariables() {
  const allAliases = [] // –ï–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
  let success = true

  for (const [, filePath] of Object.entries(THEME_FILES_TO_READ)) {
    try {
      const fullPath = path.resolve(filePath)
      const cssContent = fs.readFileSync(fullPath, 'utf8')
      const lines = cssContent.split('\n')

      for (const line of lines) {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: --var-name: value; /* optional comment */
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ match[2] = –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, match[3] = –∑–Ω–∞—á–µ–Ω–∏–µ.
        const match = line.match(
          /^(\s*)(--[^:]+):\s*([^;]+);(\s*(\/\*.*\*\/))?/
        )

        if (match) {
          const oldVarName = match[2] // –ù–∞–ø—Ä–∏–º–µ—Ä, --light-gap-4 –∏–ª–∏ --xs-breakpoint
          
          // –ò–∑–º–µ–Ω—è–µ–º 'const' –Ω–∞ 'let', —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ 'deg'.
          let value = match[3].trim() 

          // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ `--`
          const fullVarName = oldVarName.substring(2) // 'light-rotate-90'
          const parts = fullVarName.split('-')
          
          let finalName = fullVarName
          let variantSuffix = '' // –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ç–µ–º–∞, –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç)

          // 2. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å,
          // –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (–≤–∞—Ä–∏–∞–Ω—Ç–æ–º) –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ —Å—É—Ñ—Ñ–∏–∫—Å.
          if (parts.length > 1) {
            // –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç - —ç—Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å.
            variantSuffix = parts[0].toLowerCase() 
            
            // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∏–º–µ–Ω–∏
            finalName = parts.slice(1).join('-') // 'rotate-90'
          } else {
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, --opacity50), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
            finalName = fullVarName
          }

          // 3. –õ–û–ì–ò–ö–ê –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø (–û–ë–ù–û–í–õ–ï–ù–û):
          // –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å—Ç—ã–º —á–∏—Å–ª–æ–º.
          // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª—ã—Ö –∏–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª, –≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ.
          const isNumeric = /^-?\d+(\.\d+)?$/.test(value);

          if (isNumeric) {
            for (const [prefix, unit] of Object.entries(UNIT_MAP)) {
              if (finalName.includes(prefix)) {
                value += unit
                break
              }
            }
          }
          // ------------------------------------------

          // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è: --[finalName]-[variantSuffix] –∏–ª–∏ --[finalName]
          const newAliasName = variantSuffix
            ? `--${finalName}-${variantSuffix}`
            : `--${finalName}`

          // 5. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º
          const aliasLine = `  ${newAliasName}: ${value};`

          allAliases.push(aliasLine)
        }
      }
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ñ–∞–π–ª–∞: ${filePath}`)
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫: ${filePath}`)
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message)
        success = false
      }
    }
  }

  if (!success) return

  // 6. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  let outputContent =
    '/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ fix-variables.js –¥–ª—è Tailwind v4 @theme */\n\n'

  outputContent += `@theme {\n`
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
  const uniqueAndSortedAliases = [...new Set(allAliases)].sort()
  outputContent += uniqueAndSortedAliases.join('\n')
  outputContent += `\n}\n`

  try {
    const outputFullPath = path.resolve(OUTPUT_FILE)
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    fs.mkdirSync(path.dirname(outputFullPath), { recursive: true })

    fs.writeFileSync(outputFullPath, outputContent, 'utf8')
    console.log(
      `\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏ (@theme): ${OUTPUT_FILE}`
    )
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${OUTPUT_FILE}:`, error.message)
  }
}

fixCssVariables()